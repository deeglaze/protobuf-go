// Copyright 2024 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: testmessage.proto

package testmessage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Test struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nested       *Test_Nested            `protobuf:"bytes,1,opt,name=nested,proto3" json:"nested,omitempty"`
	Repeats      []*Test                 `protobuf:"bytes,2,rep,name=repeats,proto3" json:"repeats,omitempty"`
	Int32Repeats []int32                 `protobuf:"varint,3,rep,packed,name=int32repeats,proto3" json:"int32repeats,omitempty"`
	Strkeymap    map[string]*Test_Nested `protobuf:"bytes,4,rep,name=strkeymap,proto3" json:"strkeymap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// All integral types are valid map key types
	Boolkeymap   map[bool]*Test   `protobuf:"bytes,5,rep,name=boolkeymap,proto3" json:"boolkeymap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Int32Keymap  map[int32]*Test  `protobuf:"bytes,6,rep,name=int32keymap,proto3" json:"int32keymap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Int64Keymap  map[int64]*Test  `protobuf:"bytes,7,rep,name=int64keymap,proto3" json:"int64keymap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Uint32Keymap map[uint32]*Test `protobuf:"bytes,8,rep,name=uint32keymap,proto3" json:"uint32keymap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Uint64Keymap map[uint64]*Test `protobuf:"bytes,9,rep,name=uint64keymap,proto3" json:"uint64keymap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Test) Reset() {
	*x = Test{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testmessage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Test) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Test) ProtoMessage() {}

func (x *Test) ProtoReflect() protoreflect.Message {
	mi := &file_testmessage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Test.ProtoReflect.Descriptor instead.
func (*Test) Descriptor() ([]byte, []int) {
	return file_testmessage_proto_rawDescGZIP(), []int{0}
}

func (x *Test) GetNested() *Test_Nested {
	if x != nil {
		return x.Nested
	}
	return nil
}

func (x *Test) GetRepeats() []*Test {
	if x != nil {
		return x.Repeats
	}
	return nil
}

func (x *Test) GetInt32Repeats() []int32 {
	if x != nil {
		return x.Int32Repeats
	}
	return nil
}

func (x *Test) GetStrkeymap() map[string]*Test_Nested {
	if x != nil {
		return x.Strkeymap
	}
	return nil
}

func (x *Test) GetBoolkeymap() map[bool]*Test {
	if x != nil {
		return x.Boolkeymap
	}
	return nil
}

func (x *Test) GetInt32Keymap() map[int32]*Test {
	if x != nil {
		return x.Int32Keymap
	}
	return nil
}

func (x *Test) GetInt64Keymap() map[int64]*Test {
	if x != nil {
		return x.Int64Keymap
	}
	return nil
}

func (x *Test) GetUint32Keymap() map[uint32]*Test {
	if x != nil {
		return x.Uint32Keymap
	}
	return nil
}

func (x *Test) GetUint64Keymap() map[uint64]*Test {
	if x != nil {
		return x.Uint64Keymap
	}
	return nil
}

type Test_Nested struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Intfield    int32  `protobuf:"varint,1,opt,name=intfield,proto3" json:"intfield,omitempty"`
	Stringfield string `protobuf:"bytes,2,opt,name=stringfield,proto3" json:"stringfield,omitempty"`
	Bytesfield  []byte `protobuf:"bytes,3,opt,name=bytesfield,proto3" json:"bytesfield,omitempty"`
	Nested      *Test  `protobuf:"bytes,4,opt,name=nested,proto3" json:"nested,omitempty"`
}

func (x *Test_Nested) Reset() {
	*x = Test_Nested{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testmessage_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Test_Nested) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Test_Nested) ProtoMessage() {}

func (x *Test_Nested) ProtoReflect() protoreflect.Message {
	mi := &file_testmessage_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Test_Nested.ProtoReflect.Descriptor instead.
func (*Test_Nested) Descriptor() ([]byte, []int) {
	return file_testmessage_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Test_Nested) GetIntfield() int32 {
	if x != nil {
		return x.Intfield
	}
	return 0
}

func (x *Test_Nested) GetStringfield() string {
	if x != nil {
		return x.Stringfield
	}
	return ""
}

func (x *Test_Nested) GetBytesfield() []byte {
	if x != nil {
		return x.Bytesfield
	}
	return nil
}

func (x *Test_Nested) GetNested() *Test {
	if x != nil {
		return x.Nested
	}
	return nil
}

var File_testmessage_proto protoreflect.FileDescriptor

var file_testmessage_proto_rawDesc = []byte{
	0x0a, 0x11, 0x74, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61,
	0x74, 0x68, 0x22, 0xd4, 0x09, 0x0a, 0x04, 0x54, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x6e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12,
	0x2d, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x68,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x73, 0x12, 0x40, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x6b, 0x65, 0x79, 0x6d, 0x61, 0x70, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x6b, 0x65,
	0x79, 0x6d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x73, 0x74, 0x72, 0x6b, 0x65,
	0x79, 0x6d, 0x61, 0x70, 0x12, 0x43, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x6b, 0x65, 0x79, 0x6d,
	0x61, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x6b, 0x65, 0x79, 0x6d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x62,
	0x6f, 0x6f, 0x6c, 0x6b, 0x65, 0x79, 0x6d, 0x61, 0x70, 0x12, 0x46, 0x0a, 0x0b, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x6b, 0x65, 0x79, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x6b, 0x65, 0x79, 0x6d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x6b, 0x65, 0x79, 0x6d, 0x61,
	0x70, 0x12, 0x46, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x6b, 0x65, 0x79, 0x6d, 0x61, 0x70,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x6b, 0x65, 0x79, 0x6d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x6b, 0x65, 0x79, 0x6d, 0x61, 0x70, 0x12, 0x49, 0x0a, 0x0c, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x6b, 0x65, 0x79, 0x6d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x68, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x6b, 0x65, 0x79, 0x6d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x6b, 0x65,
	0x79, 0x6d, 0x61, 0x70, 0x12, 0x49, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x6b, 0x65,
	0x79, 0x6d, 0x61, 0x70, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x6b, 0x65, 0x79, 0x6d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x6b, 0x65, 0x79, 0x6d, 0x61, 0x70, 0x1a,
	0x93, 0x01, 0x0a, 0x06, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x74, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x6e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x06, 0x6e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x1a, 0x58, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x6b, 0x65, 0x79, 0x6d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x52, 0x0a, 0x0f, 0x42, 0x6f, 0x6f, 0x6c, 0x6b, 0x65, 0x79, 0x6d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70,
	0x61, 0x74, 0x68, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x53, 0x0a, 0x10, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x6b, 0x65, 0x79, 0x6d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x53, 0x0a, 0x10, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x6b, 0x65, 0x79, 0x6d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x54, 0x0a,
	0x11, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x6b, 0x65, 0x79, 0x6d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70,
	0x61, 0x74, 0x68, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x54, 0x0a, 0x11, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x6b, 0x65, 0x79,
	0x6d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x46, 0x5a, 0x44, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2d, 0x67, 0x6f, 0x2f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_testmessage_proto_rawDescOnce sync.Once
	file_testmessage_proto_rawDescData = file_testmessage_proto_rawDesc
)

func file_testmessage_proto_rawDescGZIP() []byte {
	file_testmessage_proto_rawDescOnce.Do(func() {
		file_testmessage_proto_rawDescData = protoimpl.X.CompressGZIP(file_testmessage_proto_rawDescData)
	})
	return file_testmessage_proto_rawDescData
}

var file_testmessage_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_testmessage_proto_goTypes = []interface{}{
	(*Test)(nil),        // 0: testprotopath.Test
	(*Test_Nested)(nil), // 1: testprotopath.Test.Nested
	nil,                 // 2: testprotopath.Test.StrkeymapEntry
	nil,                 // 3: testprotopath.Test.BoolkeymapEntry
	nil,                 // 4: testprotopath.Test.Int32keymapEntry
	nil,                 // 5: testprotopath.Test.Int64keymapEntry
	nil,                 // 6: testprotopath.Test.Uint32keymapEntry
	nil,                 // 7: testprotopath.Test.Uint64keymapEntry
}
var file_testmessage_proto_depIdxs = []int32{
	1,  // 0: testprotopath.Test.nested:type_name -> testprotopath.Test.Nested
	0,  // 1: testprotopath.Test.repeats:type_name -> testprotopath.Test
	2,  // 2: testprotopath.Test.strkeymap:type_name -> testprotopath.Test.StrkeymapEntry
	3,  // 3: testprotopath.Test.boolkeymap:type_name -> testprotopath.Test.BoolkeymapEntry
	4,  // 4: testprotopath.Test.int32keymap:type_name -> testprotopath.Test.Int32keymapEntry
	5,  // 5: testprotopath.Test.int64keymap:type_name -> testprotopath.Test.Int64keymapEntry
	6,  // 6: testprotopath.Test.uint32keymap:type_name -> testprotopath.Test.Uint32keymapEntry
	7,  // 7: testprotopath.Test.uint64keymap:type_name -> testprotopath.Test.Uint64keymapEntry
	0,  // 8: testprotopath.Test.Nested.nested:type_name -> testprotopath.Test
	1,  // 9: testprotopath.Test.StrkeymapEntry.value:type_name -> testprotopath.Test.Nested
	0,  // 10: testprotopath.Test.BoolkeymapEntry.value:type_name -> testprotopath.Test
	0,  // 11: testprotopath.Test.Int32keymapEntry.value:type_name -> testprotopath.Test
	0,  // 12: testprotopath.Test.Int64keymapEntry.value:type_name -> testprotopath.Test
	0,  // 13: testprotopath.Test.Uint32keymapEntry.value:type_name -> testprotopath.Test
	0,  // 14: testprotopath.Test.Uint64keymapEntry.value:type_name -> testprotopath.Test
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_testmessage_proto_init() }
func file_testmessage_proto_init() {
	if File_testmessage_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_testmessage_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Test); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testmessage_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Test_Nested); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_testmessage_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_testmessage_proto_goTypes,
		DependencyIndexes: file_testmessage_proto_depIdxs,
		MessageInfos:      file_testmessage_proto_msgTypes,
	}.Build()
	File_testmessage_proto = out.File
	file_testmessage_proto_rawDesc = nil
	file_testmessage_proto_goTypes = nil
	file_testmessage_proto_depIdxs = nil
}
